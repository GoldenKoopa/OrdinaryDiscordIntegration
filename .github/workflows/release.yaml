name: Release

on: workflow_dispatch

permissions:
  contents: read # for checkout

jobs:
  release-dry:
    name: Release Dry Run
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    outputs:
      version: ${{ steps.semantic-release-dry.outputs.new_release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v5
        id: semantic-release-dry
        with:
          dry_run: true
          semantic_version: 24.2.3
          branches: |
            [
              'master',
              'stonecutter'
            ]
          extra_plugins: |
            conventional-changelog-conventionalcommits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs: [release-dry]
    steps:
      - name: checkout repository
        uses: actions/checkout@v5
      - name: validate gradle wrapper
        uses: gradle/actions/wrapper-validation@v5
      - name: setup jdk 21
        uses: actions/setup-java@v5
        with:
          java-version: 21
          distribution: 'temurin'
      - name: gradle setup
        uses: gradle/actions/setup-gradle@v5
      - name: build
        run: ./gradlew build -Pversion=v${{ needs.release-dry.outputs.version }}
      - name: capture build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Artifacts
          path: |
            versions/*/build/libs/*
            !versions/*/build/libs/*-all.jar
            !versions/*/build/libs/*-sources.jar

  generate-versions:
    name: Generate versions
    runs-on: ubuntu-latest
    outputs:
        versions: ${{ steps.set-matrix.outputs.versions }}
    steps: 
      - name: checkout repository
        uses: actions/checkout@v5
      - name: generate versions json and set matrix 
        id: set-matrix
        run: |
          echo -n "versions=$(./.github/scripts/generate-versions)" >> "$GITHUB_OUTPUT"
          pwd 
  release-github:
    name: Release GitHub
    needs: [build]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semantic-release.outputs.new_release_version }}
      release-notes: ${{ steps.semantic-release.outputs.new_release_notes }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: Artifacts
          path: artifacts
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v5
        id: semantic-release
        with:
          semantic_version: 24.2.3
          branches: |
            [
              'master',
              'stonecutter'
            ]
          extra_plugins: |
            @semantic-release/git
            @semantic-release/github
            conventional-changelog-conventionalcommits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}

  release-modrinth:
    name: Release Modrinth
    needs: [release-github, generate-versions, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJSON(needs.generate-versions.outputs.versions) }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: Artifacts
          path: artifacts

      - name: Load generated versions into env var
        env:
          version: ${{ matrix.version }}
        run: |
          VERSIONS=$(jq -r --arg version "$version" '.[$version][]' versions.json | jq -r '.[]' | paste -sd '\n' -)
          echo "MINECRAFT_VERSIONS<<EOF" >> $GITHUB_ENV
          echo "$VERSIONS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Load filename into env var
        run: |
          filename=$(ls artifacts/${{ matrix.version }}/build/libs/ | grep -v all | grep -v sources)
          echo -n "FILENAME=$filename" >> "$GITHUB_ENV"
      - name: Load changelog into env
        run: |
          most_recent_version=$(ls versions | sort | tail -1)
          if [[ "$most_recent_version" = "${{ matrix.version }}" ]]; then
            # echo -n "CHANGELOG=${{ needs.release-github.outputs.release-notes }}" >> "$GITHUB_ENV"
            echo "MINECRAFT_VERSIONS<<EOF" >> $GITHUB_ENV
            echo "${{ needs.release-github.outputs.release-notes }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else 
            echo -n "CHANGELOG=" >> "$GITHUB_ENV"
          fi

      - name: Upload to Modrinth
        uses: cloudnode-pro/modrinth-publish@v2
        with:
          token: ${{ secrets.MODRINTH_TOKEN }}
          project: ${{ secrets.MODRINTH_PROJECT_ID }}
          name: v${{ needs.release-github.outputs.version }}
          version: ${{ needs.release-github.outputs.version }}
          changelog: ${{ env.CHANGELOG }}
          status: unlisted
          loaders: |-
            fabric
          game-versions: |-
            ${{ env.MINECRAFT_VERSIONS }}
          files: artifacts/${{ matrix.version }}/build/libs/${{ env.FILENAME }}
