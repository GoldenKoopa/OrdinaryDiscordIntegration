plugins {
    id 'fabric-loom' version '1.11-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version "8+"
}

group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "discordjustsync" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

    runConfigs.all {
        ideConfigGenerated true 
        runDir "../../run" 
    }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    mavenCentral()
    maven { url "https://api.modrinth.com/maven" }
    maven {
        url "https://maven.nucleoid.xyz/"
        name "Nucleoid"
    }
    maven {
        url = uri("https://repo.opencollab.dev/main/")
    }
    maven { url 'https://jitpack.io' }
}

configurations {
    embed
    compileOnly.extendsFrom(embed)
}

shadowJar {
    configurations = [project.configurations.embed]
    exclude('META-INF/services/**')
    relocate 'okhttp3', 'dcshadow.okhttp'
    relocate 'okio', 'dcshadow.okio'
    relocate 'club.minnced', 'dcshadow.club.minnced'
    relocate 'com.sun', 'dcshadow.com.sun'
    relocate 'com.iwebpp', 'dcshadow.com.iwebpp'
    relocate 'com.neovisionaries', 'dcshadow.com.neovisionaries'
    relocate 'gnu', 'dcshadow.gnu'
    relocate 'org.apache.commons.collections4', 'dcshadow.org.apache.commons.collections4'
    relocate('org.apache.commons.lang3', 'dcshadow.org.apache.commons.lang3')
    relocate 'org.json', 'dcshadow.org.json'
    relocate 'org.intellij', 'dcshadow.org.intellij'
    relocate 'org.jetbrains', 'dcshadow.org.jetbrains'
    relocate 'tomp2p', 'dcshadow.tomp2p'
    relocate 'com.fasterxml', 'dcshadow.com.fasterxml'
    relocate 'dev.vankka', 'dcshadow.dev.vankka'
    relocate 'net.kyori', 'dcshadow.net.kyori'
    relocate 'org.checkerframework', 'dcshadow.org.checkerframework'
    relocate "com.moandjiezana", "dcshadow.com.moandjiezana"
    relocate "ch.lambdaj", "dcshadow.ch.lambdaj"
    relocate "emoji4j", "dcshadow.emoji4j"
    relocate "javax.annotation", "dcshadow.javax.annotation"
    relocate "net.sf", "dcshadow.net.sf"
    relocate "org.hamcrest", "dcshadow.org.hamcrest"
    relocate "org.objenesis", "dcshadow.org.objenesis"
    relocate "kotlin", "dcshadow.kotlin"
    relocate "com.vdurmont", "dcshadow.com.vdurmont"
    relocate "com.google.gson", "dcshadow.com.google.gson"
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${stonecutter.current.version}"
    mappings "net.fabricmc:yarn:${property('yarn_mappings')}:v2"
    modImplementation "net.fabricmc:fabric-loader:${property('loader_version')}"
    include(modImplementation("me.lucko:fabric-permissions-api:${property('fabric_permissions_api_version')}"))

    // fabric api
    modImplementation "net.fabricmc.fabric-api:fabric-api:${property('fabric_version')}"
    // productionRuntimeMods "net.fabricmc.fabric-api:fabric-api:${property('fabric_version')}"

    embed implementation("net.dv8tion:JDA:${property('jda_version')}") {
        exclude module: "opus-java"
    }

    embed implementation("club.minnced:discord-webhooks:${property('webhooks_version')}")
    embed implementation("com.github.nombel-mombel:toml4j:b90e761")

    // integrations
    compileOnly "net.luckperms:api:${property('luckperms_api_version')}"
    compileOnly "org.geysermc.floodgate:api:${property('floodgate_api_version')}"
    modCompileOnly "maven.modrinth:vanish:${property('vanish_version')}"

    // placeholder-api
    modImplementation "eu.pb4:placeholder-api:${property('placeholder_api_version')}"
    productionRuntimeMods "eu.pb4:placeholder-api:${property('placeholder_api_version')}"
}
tasks.build.dependsOn(tasks.shadowJar)

processResources {
    // def minecraft_version = stonecutter.current.version
    // if (stonecutter.current.hasProperty('last_minecraft_version')) {
    //     minecraft_version = minecraft_version + " <=" + stonecutter.current.property('last_minecraft_version')
    // }
    inputs.property "version", "1.0.0"
    inputs.property "minecraft_version", "1.21.4"
    inputs.property "loader_version", "0.17.0"
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": "1.0.0",
                "minecraft_version": "1.21.4",
                "loader_version": "0.17.0"
    }
}

// tasks.register("prodServer", net.fabricmc.loom.task.prod.ServerProductionRunTask) {
//     def version = (hasProperty('version') && property('version') != 'unspecified') 
//         ? property('version'): property('minecraft_version')
//
//     def fabricApiMetadataUrl = 'https://maven.fabricmc.net/net/fabricmc/fabric-api/fabric-api/maven-metadata.xml'
//
//     def latestFabricApiVersion = null
//     try {
//         def xmlText = new URL(fabricApiMetadataUrl).text
//         def parsedXml = new XmlSlurper().parseText(xmlText)
//         def matchingVersions = parsedXml.versioning.versions.version.findAll {
//             v -> v.text().endsWith("+${version}")
//         }
//         if (!matchingVersions.isEmpty()) {
//             latestFabricApiVersion = matchingVersions[-1].text()
//         }
//     } catch (Exception e) {
//         logger.warn("Failed to fetch or parse Fabric API metadata, falling back to default version: $e")
//         latestFabricApiVersion = project.fabric_version 
//         version = project.minecraft_version
//     }
//
//     if (latestFabricApiVersion == null) {
//         throw new GradleException("No Fabric API version found for specified Minecraft version: ${version}")
//     }
//
//     configurations {
//         register("runtimeMods")
//     }
//
//     dependencies.add("runtimeMods", "net.fabricmc.fabric-api:fabric-api:${latestFabricApiVersion}")
//     mods.from(configurations.named("runtimeMods"))
//
//     installerVersion = "1.0.1"
//     loaderVersion = property('loader_version')
//     minecraftVersion = version
// }

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

remapJar {
    // wait until the shadowJar is done
    dependsOn(shadowJar)
    mustRunAfter(shadowJar)
    // Set the input jar for the task. Here use the shadow Jar that include the .class of the transitive dependency
    inputFile = file(shadowJar.archiveFile)
}

artifacts {
    archives tasks.shadowJar
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
